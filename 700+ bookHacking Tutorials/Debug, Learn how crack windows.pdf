%PDF-1.3
1 0 obj
<<
/CreationDate(D:20160204102506)
/Title()
/Author(PDFZilla)
/Keywords(PDFZilla,Zilla PDF)
/Producer(PDFZilla - Zilla TXT To PDF Converter)
>>
endobj
5 0 obj
[
750 750 278 278 355 556 556 889 667 190 333 333 389 584 278 333 
278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 
584 556 1015 667 667 722 722 667 610 778 722 278 500 667 556 832 
722 778 667 778 722 667 610 722 667 944 667 667 610 278 278 278 
469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 832 
556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 
584 750 556 750 222 556 333 1000 556 556 333 1000 667 333 1000 750 
610 750 750 222 222 333 333 350 556 1000 333 1000 500 333 944 750 
500 667 278 333 556 556 556 556 260 556 333 736 370 556 584 333 
736 552 400 549 333 333 333 576 537 333 333 333 365 556 834 834 
834 610 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 
278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 
667 610 556 556 556 556 556 556 889 500 556 556 556 556 278 278 
278 278 556 556 556 556 556 556 556 549 610 556 556 556 556 500 
556 500 
]
endobj
6 0 obj
<<
/Type/FontDescriptor
/FontName/Arial
/Ascent 905
/Descent -212
/ItalicAngle 0
/CapHeight 905
/Flags 32
/FontBBox[0 0 0 0]
>>
endobj
7 0 obj
<<
/Type/Font
/Subtype/TrueType
/Name/F0
/BaseFont/Arial
/Encoding/WinAnsiEncoding
/FirstChar 30
/LastChar 255
/Widths 5 0 R
/FontDescriptor 6 0 R
>>
endobj
8 0 obj
<<
/Length 4560
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(debug: Learn how to crack windows, programs ect manually) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
( ///////////*1000+ HACKING TRICKS & TUTORIALS - ebook By Mukesh Bhardwaj Blogger  - Paid Version - only @ ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(TekGyd | itechhacks | Mukeshtricks4u*///////) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(Debug is a program that comes with modern versions of DOS \(I do not know when I started shipping out with ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(DOS\). Anyway, all Windows users should have it already.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(It's a great tool for debuging programs, unassembling and cracking, and reading "hidden" memory areas like the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(boot sector, and much more.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(The following was copied from an assembly tutorial who's author we cannot credit, because we have no idea who ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(he is.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(Get into DOS and type "debug", you will get a prompt like this:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(-) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(now type "?", you should get the following response:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(assemble A [address]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(compare C range address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(dump D [range]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(enter E address [list]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(fill F range list) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(go G [=address] [addresses]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(hex H value1 value2) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(input I port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(load L [address] [drive] [firstsector] [number]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(move M range address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(name N [pathname] [arglist]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(output O port byte) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(proceed P [=address] [number]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(quit Q) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(register R [register]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(search S range list) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(trace T [=address] [value]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(unassemble U [range]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(write W [address] [drive] [firstsector] [number]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(allocate expanded memory XA [#pages]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(deallocate expanded memory XD [handle]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(map expanded memory pages XM [Lpage] [Ppage] [handle]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(display expanded memory status XS) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(Lets go through each of these commands:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(Assemble:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(-a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(107A:0100) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(At this point you can start assembling some programs, just like using a assembler. However the debug assembler) Tj
ET
endstream
endobj
9 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 8 0 R
>>
endobj
10 0 obj
<<
/Length 4294
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(is very limited as you will probably notice. Lets try to enter a simple program:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(-a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(107A:0100 MOV AH,02) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(107A:0102 MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(107A:0104 INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(107A:0106 INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(-g) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(A) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(Program terminated normally) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(That's the same program we did at the end of the previous chapter. Notice how you run the program you just ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(entered with "g", and also notice how the set-up part is not there? That's because debug is just too limited ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(to support that.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(Another thing you can do with assemble is specify the address at which you want to start, by default this is ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(0100 since that's where all .COM files start.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Compare:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(Compare takes 2 block of memory and displays them side by side, byte for byte. Lets do an example. Quite out ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(of debug if you haven't already using "q". Now type "debug c:\\command.com") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(-c 0100 l 8 0200) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(10A3:0100 7A 06 10A3:0200) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(This command compared offset 0100 with 0200 for a length of 8 bytes. Debug responded with the location that ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(was DIFFERENT. If 2 locations were the same, debug would just omit them, if all are the same debug would ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(simply return to the prompt without any response.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(Dump:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(Dump will dump a specified memory segment. To test it, code that assembly program again:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(C:\\>debug) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(-a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(107A:0100 MOV AH,02) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(107A:0102 MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(107A:0104 INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(107A:0106 INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(-d 0100 l 8) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(107A:0100 B4 02 B2 41 CD 21 CD 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(...A.!.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(The "B4 02 B2 41 CD 21 CD 20" is the program you just made in machine language.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(B4 02 = MOV AH,02) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(B2 41 = MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(CD 21 = INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(CD 20 = INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(The "...A.!." part is your program in ASCII. The "." represent non-printable characters. Notice the A in ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(there.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(Enter:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(This is one of the hard commands. With it you can enter/change certain memory areas. Lets change our program ) Tj
ET
endstream
endobj
11 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 10 0 R
>>
endobj
12 0 obj
<<
/Length 4223
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(so that it prints a B instead of an A.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(-e 0103 <-- edit program at segment 0103) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(107A:0103 41.42 <-- change 41 to 42) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(-g) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(Program terminated normally) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(-) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(Wasn't that amazing?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(Fill:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(This command is fairly useless, but who knows....) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(It fills the specified amount of memory with the specified data. Lets for example clear out all memory from ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(segment 0100 to 0108, which happens to be our program.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(-f 0100 l 8 0 <-- file offset 0100 for a length of 8 bytes with 0) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(-d 0100 l 8 <-- verify that it worked) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(107A:0100 00 00 00 00 00 00 00 00 .......) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Yep, it worked.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(Go:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(So far we used go \(g\) to start the program we just created. But Go can be used for much more. For example, ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(lets say we want to execute a program at 107B:0100:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(-r CS <-- set the CS register to point to 107B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(CS 107A) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(:107B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(-g =100) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(You can also set breakpoints.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(-a <-- enter our original program so we have something) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(107A:0100 MOV AH,02 to work with) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(107A:0102 MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(107A:0104 INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(107A:0106 INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(-g 102 <-- set up a break point at 107A:0102) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(At this point the program will stop, display all registers and the current instruction.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(Hex:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(This can be very useful. It subtracts and adds two hexadecimal values:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(-h 2 1) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(0003 0001 <-- 2h + 1+ = 3h and 2h - 1h = 1h) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(This is very useful for calculating a programs length, as you will see later.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(Input:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(This is one of the more advanced commands, and I decided not to talk about it too much for now. It will read a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(byte of data from any of your computers I/O ports \(keyboard, mouse, printer, etc\).) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(-i 3FD) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(60) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(-) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(Your data may be different.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(In case you want to know, 3FD is Com port 1, also known as First Asynchronous Adapter.) Tj
ET
endstream
endobj
13 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 12 0 R
>>
endobj
14 0 obj
<<
/Length 4715
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(Load:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(This command has 2 formats. It can be used to load the filename specified with the name command \(n\), or it can) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(load a specific sector.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(-n c:\\command.com) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(-l) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(This will load command.com into debug. When a valid program is loaded all registers will be set up and ready ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(to execute the program.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(The other method is a bit more complicated, but potential also more usefull. The syntax is) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(L <address> <drive letter/> <sector> <amount to load>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(-l 100 2 10 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(This will load starting at offset 0100 from drive C \(0 = A, 1 = B, 2 = C, etc\), sector 10h for 20h sectors. ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(This can be useful for recovering files you deleted.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Move:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(Move takes a byte from the starting address and moves it to the destination address. This is very good to ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(temporary move data into a free area, than manipulate it without having to worry about affecting the original ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(program. It is especially useful if used in conjunction with the r command to which I will get later. Lets try) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(an example:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(-a <-- enter our original program so we have something) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(107A:0100 MOV AH,02 to work with) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(107A:0102 MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(107A:0104 INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(107A:0106 INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(-m 107A:0100 L 8 107B:0100 <-- more 8 bytes starting from 107A:0100 into 107B:0100) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(-e 107B:0103 <-- edit 107B:0103) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(107B:0103 41.42 <-- and change it 42 \() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(-d 107A:0100 L 8 <-- make sure it worked) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(107A:0100 B4 02 B2 41 CD 21 CD 20 ...A.!.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(-d 107B:0100 L 8) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(107A:0100 B4 02 B2 42 CD 21 CD 20 ...B.!.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(-m 107B:0100 L 8 107A:0100 <-- restore the original program since we like the changes.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(Name:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(This will set debug up with a filename to use for I/O commands. You have to include the file extension, and ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(you may use addition commands:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(-n c:\\command.com) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(Output:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(Exactly what you think it is. Output sends stuff to an I/O port. If you have an external modem with those cool) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(lights on it, you can test this out. Find out what port your modem is on and use the corresponding hex number ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(below:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(Com 1 = 3F8 - 3FF \(3DF for mine\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(Com 2 = 2F8 - 2FF) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(Com 3 = ??? - ??? \(if someone knows, please let me know\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(Now turn on the DTA \(Data Terminal Ready\) bit by sending 01h to it:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(-o XXX 1 <-- XXX is the com port in hex) Tj
ET
endstream
endobj
15 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 14 0 R
>>
endobj
16 0 obj
<<
/Length 4200
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(As soon as you hit enter, take a look at your modem, you should see a light light up. You can have even more ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(fun with the output command. Say someone put one of those BIOS passwords on "your" computer. Usually you'd ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(have to take out the battery to get rid of it, but not anymore:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(MI/AWARD BIOS) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(-o 70 17) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(-o 71 17) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(QPHOENIX BIOS) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(-o 70 FF) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(-o 71 17) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(QGENERIC) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(-o 70 2E) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(-o 71 FF) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(These commands will clear the BIOS memory, thus disabling the password.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(Proceed:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(Proceeds in the execution of a program, usually used together withy Trace, which I will cover later. Like the ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(go command, you can specify an address from which to start) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(using =address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(-p 2) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(Debug will respond with the registers and the current command to be executed.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(Quite:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(This has got to be the most advanced feature of debug, it exits debug!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(-q) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(Register:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(This command can be used to display the current value of all registers, or to manually set them. This is very ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(useful for writing files as you will see later on.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(-r AX) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(AX: 011B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(:5) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(-) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(Search:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(Another very useful command. It is used to find the occurrence of a specific byte, or series of bytes in a ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(segment. The data to search for can by either characters, or a hex value. Hex values are entered with a space ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(or comma in between them, and characters are enclosed with quotes \(single or double\). You can also search for ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(hex and characters with the same string:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(-n c:\\command.com <-- load command.com so we have some data to search in) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(-l) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(-s 0 l 0 "MS-DOS" <-- search entire memory block for "MS-DOS") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(10A3:39E9 <-- found the string in 10A3:39E9) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(NOTE: the search is case sensitive!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(Trace:) Tj
ET
endstream
endobj
17 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 16 0 R
>>
endobj
18 0 obj
<<
/Length 2385
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(This is a truly great feature of debug. It will trace through a program one instruction at a time, displaying ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(the instruction and registers after each. Like the go command you can specify where to start executing from, ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(and for how long.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(-a <-- yes, this thing again) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(107A:0100 MOV AH,02) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(107A:0102 MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(107A:0104 INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(107A:0106 INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(-t =0100 8) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(If you leave out the amount of instructions that you want to trace, you can use the proceed \(p\) to continue ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(the execution as long as you want.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(Unassemble:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(Unassembles a block of code. Great for debugging \(and cracking\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(-u 100 L 8 <-- unassembles 8 bytes starting at offset 100) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(107A:0100 MOV AH,02 <-- debut's response) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(107A:0102 MOV DL,41) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(107A:0104 INT 21) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(107A:0106 INT 20) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(Write:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(This command works very similar to Load. It also has 2 ways it can operate: using name, and by specifying an ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(exact location. Refer to back to Load for more information.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(NOTE: The register CX must be set the file size in order to write!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(NOTE: Write will not write .EXE or .HEX files.[SIZE=7][SIZE=14]) Tj
ET
endstream
endobj
19 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 18 0 R
>>
endobj
20 0 obj
<<
/Type/Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type/Pages
/Kids[
9 0 R
11 0 R
13 0 R
15 0 R
17 0 R
19 0 R
]
/Count 6
/Resources 3 0 R
>>
endobj
3 0 obj
<<
/ProcSet[/PDF/Text/ImageC]
/Font<<
/F0 7 0 R
>>
>>
endobj
xref
0 21
0000000000 65535 f
0000000009 00000 n
0000026732 00000 n
0000026841 00000 n
0000000168 00000 n
0000000168 00000 n
0000001113 00000 n
0000001256 00000 n
0000001421 00000 n
0000006032 00000 n
0000006126 00000 n
0000010472 00000 n
0000010568 00000 n
0000014843 00000 n
0000014939 00000 n
0000019706 00000 n
0000019802 00000 n
0000024054 00000 n
0000024150 00000 n
0000026587 00000 n
0000026683 00000 n
trailer
<<
/Size 21
/Root 20 0 R
/Info 1 0 R
/ID[(424044341ttegLrhanwp)(424044341ttegLrhanwp)]
>>
startxref
26910
%%EOF
