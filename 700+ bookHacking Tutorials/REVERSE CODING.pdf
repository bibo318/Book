%PDF-1.3
1 0 obj
<<
/CreationDate(D:20160204102522)
/Title()
/Author(PDFZilla)
/Keywords(PDFZilla,Zilla PDF)
/Producer(PDFZilla - Zilla TXT To PDF Converter)
>>
endobj
5 0 obj
[
750 750 278 278 355 556 556 889 667 190 333 333 389 584 278 333 
278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 
584 556 1015 667 667 722 722 667 610 778 722 278 500 667 556 832 
722 778 667 778 722 667 610 722 667 944 667 667 610 278 278 278 
469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 832 
556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 
584 750 556 750 222 556 333 1000 556 556 333 1000 667 333 1000 750 
610 750 750 222 222 333 333 350 556 1000 333 1000 500 333 944 750 
500 667 278 333 556 556 556 556 260 556 333 736 370 556 584 333 
736 552 400 549 333 333 333 576 537 333 333 333 365 556 834 834 
834 610 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 
278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 
667 610 556 556 556 556 556 556 889 500 556 556 556 556 278 278 
278 278 556 556 556 556 556 556 556 549 610 556 556 556 556 500 
556 500 
]
endobj
6 0 obj
<<
/Type/FontDescriptor
/FontName/Arial
/Ascent 905
/Descent -212
/ItalicAngle 0
/CapHeight 905
/Flags 32
/FontBBox[0 0 0 0]
>>
endobj
7 0 obj
<<
/Type/Font
/Subtype/TrueType
/Name/F0
/BaseFont/Arial
/Encoding/WinAnsiEncoding
/FirstChar 30
/LastChar 255
/Widths 5 0 R
/FontDescriptor 6 0 R
>>
endobj
8 0 obj
<<
/Length 4764
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(REVERSE CODING) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
( ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
( ///////////*1000+ HACKING TRICKS & TUTORIALS - ebook By Mukesh Bhardwaj Blogger  - Paid Version - only @ ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(TekGyd | itechhacks | Mukeshtricks4u*///////) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(----------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(REVERSE CODING) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(----------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(# Released by Cybnet Security Group) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(# legalz: modify and use at will, if you make any changes, improvements, updates or use the code) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(# in another project, please send us what you did and give credit) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(# if you have any questions, post them at forum.hackerthreads.net) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(# be sure to check out hackerthreads.org for updates and new tutorials/downloads) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(Index:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(-------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(1.Introduction) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(2.Disclaimer) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(3.Hexadecimal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(4.RAM and ROM) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(5.ASM) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(6.Needed programs) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(7.Cracking) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(8.Conclusion) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(---------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(---Introduction----------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(Welcome to my Reverse Coding tutorial! In this paper, you will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(learn how to crack and modify your own software. I'll try to get) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(into as much detail as possible, yet also dumb it down a bit. =\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(---Disclaimer------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(All information is purely for educational purposes only! The author) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(cannot be held responsible for any \(ab\)use of this information.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(USE AT YOUR OWN RISK!!!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(---Hexadecimal----------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(To begin, I'm going to teach you about hexadecimal, so if you already) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(know it, then move on. Even if you do already know it, I suggest) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(sticking around for a refreshment of your memory.=\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(Hexadecimal, or hex as it's more commonly known, is a base 16) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(numbering system. Base 16 meaning that it consists of 16 numbers:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(0-9 and A-F. Each of these numbers \(A-F=10-16\) have a value of 4 bits) Tj
ET
endstream
endobj
9 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 8 0 R
>>
endobj
10 0 obj
<<
/Length 5399
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(and are also called nibbles. In representing a hexadecimal number, one) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(would write an "0x" before the actual bit set. 0x is simply a tag put) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(before a hex number to let programmers know that it is in fact, hex.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(When writing hex, you will not need to use this prefix.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(If you haven't already noticed, the 0x prefix looks similar to that of exponential) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(notation. Actually this is where 0x has been derived, seeing as how) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(hex is simply a number that has been raised to a power of 16.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(This means 10 in hexadecimal represents the value 16+0, or 16. So check) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(out this example:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(0xB3 \(hex\)= 2*16\(squared\)+11*16\(to the 1st power\)+3*16\(to the power of 0 \)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(=2*256+11*16+3=691 \(decimal\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(Yeah, you could do all of that, or you could be lazy and use an automated) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(program that does it all for you. Why do you need to know hex? Because) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(it's used by every piece of software and hardware. How? Memory based address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(allocation. Here's an example:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(When you clicked on your browsers icon to launch it, the click triggered a "call") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(\(an asm function that will be discussed more in depth in later chapters.\) which) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(went back to the programs memory with the "click in it's hand." It finds the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(address where the code is that makes the program launch and executes it. The) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(address is written in, you guessed it, hex. An example of an address would be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(something like this:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(101c5018) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(5108 would be the actual specific address and 101c would be the sector) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(of RAM were the address is located. Those are the basics of Hexadecimal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(You should probley read this chapter againbecause getting a firm grasp on hex) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(is essential to cracking and moding programs.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(----------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(---RAM and ROM--------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(In this section we are gonna learn about RAM and ROM. Many people kno about) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(the hardware part of RAM and ROM and that's gonna be very useful to you......) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(just not in this tutorial. =\) We are about to learn about the "software" side. I use the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(term software loosly in that software tends to have a GUI \(Graphical User Interface\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(and this does not. BUT, there are ways to access and modify the behavior of it that) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(I will talk about in this chapter, as well as in the next. To start off, I'll answer some) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(common questions:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(What is RAM?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(RAM \(Random Access Memory\) is basically memory and the process of accessing it.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(The term "Random Access Memory" was approprietly given to this memory unit because) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(when executing a command, the CPU doesn't have to scroll through all the memory on) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(your PC until it finds the right address. It "randomly" whips out the addy from it's back) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(pocket and serves it up.This process is both quick and efficient. Learning this process) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(will help you understand the ASM functions in the next chapter.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(How does RAM work?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
() Tj
ET
endstream
endobj
11 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 10 0 R
>>
endobj
12 0 obj
<<
/Length 5147
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(When a command is issued and the memory is pulled from file, it must first go through) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(what is called a "vector". A vector is a "gateway" or a "sector" of RAM where the address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(of the function is stored with others of it's own kind. An example of a vector would be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(something like this:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(8c0000b4-8c00ffff) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(This means that all "addressii" \(hehe\) that are between those values are stored in that) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(sector of RAM. A vector acts as a gateway in that, first, pass through a vector to get to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(address. Your average program probley has about 30 to 40 main vectors, sectioning) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(off from boot until exit. Knowing the vector of an addy or a function will greatly reduce) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(your headache when you start searching for it.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(ROM. ROM is a part of memory that doesn't change. \(Although we can change it.=\) \)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(Boot ROM for instance, follows the same plan of action it is called upon. ROM also has) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(vectors, just like RAM. ROM is not that important when it comes to cracking to we will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(leave it alone for now.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(Back to RAM. Believe it or not, but addressii \(there I go again, I'm such a g33k.\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(actually follow certain formats or syntax's for certain functions. Take hot keys for) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(example: In the under ground, we call them "Joker commands". By pressing a certain) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(combonation of keys, a program will run, close, be stupid, whatever. The syntax for a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(Joker command is as follows:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(0d-aaaaaf) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(000zvvvv) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(Let's examine this format a little closer.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(0d= The proclemation of a specifyed format) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(aaaaa= The address of the function) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(f= The float or remainder; "Floating point number" ; decimal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(000= "NOP" No operation) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(z= The "Booleon" as we the C++ programmers call it. A booleon is an "IF, THEN" statement.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
("IF this is true, THEN do this." Value 0= equal; 1= different; 2=less than; 3=greater than.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(vvvv= The combonation of hex values \(The values of the keys pressed\) used to execute the "CALL") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(Say the "A" key had a vlaue of fffb and the "B" key has a vlaue of fffd. You would then add both) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(values using a hex calculator and get fff9 as the sum. The output on you calculator would) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(show 1fff8. Add the first value and the last value to find the fourth byte segment. So say) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(we've found the address of the Joker function \(usually in the boot ROM sector\) commonly) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(called the "Maple address" and we are ready to program in some hex code. Our code may) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(look like this:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(0d7ae671) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(0000fff9) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(This means that IF the value of fff9 \(A and B\) is equal \(0\) to the address \(aaaaf\) of the function,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(THEN execute it. See? Easy isn't it? You'll need to know things like this when modding programs) Tj
ET
endstream
endobj
13 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 12 0 R
>>
endobj
14 0 obj
<<
/Length 5071
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(as a use of executing of your arbitrary code in certain parts of your program at a certain time.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(Joker commands are also reversable in that if you enter the same code except with a 1,2, or 3,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(in the z slot and by changing the button combonations. Reversable meaning terminating the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(function or other functions that were started. A good use for this is for firewalls and babysitting) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(programs. Are you on a college machine and can't download stuff because of that pesky firewall?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(Crack it open and program in some Joker commands so you can turn it on and off at will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(WITHOUT the administrator's password!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(---ASM-----------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(To start off with our small and to the point ASM section, I'll warn you in advance, after reading this,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(you'll need to go take a shower cause this is disgusting! Here we go!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(To begin, I'm gonna define for you some functions that you'll be seeing alot of, and be using. Here they are:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(.:Hex:. .:ASM:. .:MEANING:.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(75,0f85 jne jump if not equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(74,0f84 je jump is equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(eb jmp jump directly to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(90 nop no operation) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(77,0f87 ja jump if above) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(0f86 jna jump if not above) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(0f83 jae jump if above or equal to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(0f82 jnae jump if not above or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(0f82 jb jump if below) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(0f83 jnb jump is not below) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(of86 jbe jump if below or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(0f87 jnbe jump if not below or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(0f8f jg jump if greater) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(0f8e jng jump if not greater) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(0f8d jge jump if greater or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(0f8c jnge jump if not greater or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(0f8c jl jump if less) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(0f8d jnl jump if not less) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(0f8e jle jump if less or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(0f8f jnle jump if not less or equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(The easy thing about most of the functions in ASM are that they sound like what they mean.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(Jump, means of coarse, to Jump from one thing to another. Example:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
("jmp 00401744" would mean to jump directly to the address 00401744 once the code) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(hits the function.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(Let's look at "CALL". Call is a function that is used to "call" a certain task, string, address, whatever.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(Take a look at this example:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
("Call 0040ccc2" this would of coarse call the address 0040ccc2 and use it. Those are the functions) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(you'll be using.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(The reason why I'm not going into loads of detail in this chapter is because when) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(cracking software, not an extensive amount of knowledge of ASM is needed. If you want) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(to know more or need help with something, e-mail me at the address provided at the end of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(this tutorial. This chapter wasn't so nasty was it? Nah, it was easy =\)) Tj
ET
endstream
endobj
15 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 14 0 R
>>
endobj
16 0 obj
<<
/Length 4936
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(----------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(---Needed Programs----------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(The programs you will need are as follows:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(WDasm 8.9 or Higher) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(Hiew 6.1) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(Softice for win9x v3.24) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(SubmitWolf\(demo\)v4.01 \(http://www.trellian.com/swolf\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(Programming Language \(C,C++,Pascal,ASM whatever you would like\) Prefably C for this tutorial!) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(And a brain \(no seriously\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(---Cracking-----------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Ok, here we go! The first thing you need to do is to open up SoftIce and then swolf32.exe which is the name ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(given to our) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(target program. Go to the help menu and select register. Here's where your brain will come in, start to look) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(for how the protection is running by entering some random crap into the blank space. Don't press the OK button) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(yet though.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(Instead, press CTRL-D to bring up SoftIce. What we are gonna try to do is define a breakpoint, using BPX ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(hmemcpy.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(Hit CTRL-D again and it will bring you back to the program. Click OK on the box and SoftIce will again pop up.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(Now press F12) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(and it will bring you to the target program code. Scroll down a few lines and find:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(:004167D9 8D4C2410 lea ecx, dword ptr {esp+10}--;ecx=the random crap you typed in.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(:004167DD 8D94290000000 lea edx, dword ptr {esp+00000090}-;edx=name) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(:004167E4 51 push ecx) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(:004167E5 52 push edx) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(:004167E6 E8B5450100 call 0042ADA0----;this is the call which calculates the serial) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(:004167EB 83C410 add esp, 00000010--;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(:004167EE 85C0 test eax, eax----;and return eax=1 if true \(booleon =\) \)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(:004167F0 0F8596000000 jne 0041688C----;jump to registered) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(:004167F6 8D442408 lea eax, dword ptr {esp+08}) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(:004167FA 8D8C2488000000 lea ecx, dword ptr {esp+00000088}) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(:00416801 50 push eax) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(:00416802 51 push ecx) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(:00416803 E868470100 call 0042AF70----;this call tests our serial) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(:00416808 83C408 add esp, 00000008---;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(:0041680B 85C0 test eax, eax----;for v3.XX one.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(:0041680D 7433 je 00416842;jump is equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(The call that we want to focas on is at 004167E6. This call tests wether our serial is for the correct version) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(or not.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(Let's trace the call 004ADA0:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(*Referenced by a CALL at address:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(:0042ABFC) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(:0042ADA 83EC30 sub esp, 00000030) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(:0042ADA3 55 push ebp) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(:0042ASA4 56 push esi) Tj
ET
endstream
endobj
17 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 16 0 R
>>
endobj
18 0 obj
<<
/Length 4738
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(:004ADA5 57 push edi) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(:0042ADA6 8B7C24444 mov edi, dword ptr {esp+44}--;edi=our fake serial) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(:004ADAA 85FF test edi, edi) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(:004ADAC 0F4A7010000 je 0042AF59----;die if empty) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(:004ADB2 8B6C2440 mov ebp, dword ptr {esp+40}--ebp=our name) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(:0042ADB6 85ED test ebp, ebp) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(:004ADB8 0F849B010000 je 0042AF59---;die if empty) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(:004ADBE 8A07 mov al, byte ptr {edi}--;compare 1st byte of serial with 'p', die) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(:0042ADC0 3C50 cmp al, 50----;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(:0042ADC2 0F8587010000 jne 0042AF4F----;if not equal) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(:0042ADC8 807F0134 cmp byte ptr {edi+01}, 34--:compare byte of serial with '4') Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(:004ADCC 750C jne 0042ADDA----;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(:0042ADCE C70500C8430000000000 mov dword ptr {0043C800}, 00000000) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(:0042ADD8 EB1C jmp 0042ADF6) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(As we can see by the above, the code tells us that the first value of our serial will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(be 'p' and a cycle of a four byte algorythm. I could go on and on about all of the internals) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(of all this stuff but that would be going beyond the scope of this tutorial. The idea was to show) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(how to crack this pro, and thats what I'm going to do. Based on the information I've given you, and the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(information that you can deduce from reading the code, I've written a small key generator in C.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(If you know C, then you'll be able to tell where i got the algorythms to write it. So here it is:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(#include<stdio.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(#include<conio.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(int main\(void\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
({) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(long code=555583,count1,count2;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(char name[25],cod[5],type='0';) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(clrscr\(\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(textcolor\(14\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(printf\("This is a simple key-generator written by k33t of CYBNET Security Group"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(printf\("================================================="\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(text color\(10\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(printf\("SubmitWolf\(demo\)ver4.1 cracked by k33t"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(textcolor\(14\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(printf\("%c%c%c",0x10,0x10,0x10"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(textcolor\(12\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(printf\("Yup"\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(prinf\("-November 2002"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(prinf\("'\\n\\nSelect Edition PRO\(0\) or Enterprise\(1\) \(0/1\)="\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(scanf\("%c",&type\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(if\(type=='1'\)code=557283;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(getchar\(\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(prinf\("Enter Registration Name="\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(scanf\("%[^\\n]",name\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(for\(count1=0;count1<=3;count1++) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(cod[count1]=name[count1];) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(for\(count=1;count1=3;count1++\){) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(for\(count2=0;count2<=3;count2++\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(cod[count2]=cod[count2]*\(code%100\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(code=code/100;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(}) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(for\(count1=0;name[count1]>0;count1++\);) Tj
ET
endstream
endobj
19 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 18 0 R
>>
endobj
20 0 obj
<<
/Length 3240
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(for\(count2=0;count2<=3;count2++\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(cod[count2]=cod[count2]^\(name[count1]+3\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(for=\(count1-3;count1>=0;count1--\){) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(code=code+\(cod[count1]&0xFF\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(if\(count1>0\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(code=code*0x100;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(}) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(if\(code<0\)code=-code;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(for\(;code<10000;\) code=code*10;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(for\(;code>999999;\) code=code/10;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(printf\(Your Serial Number=P%c4-%ld",\(type=='1'\)? 'E':'4'code\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(return ;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(}) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(Ok! So! An overall conclusion of this code is:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(1.First two characters of the serial must be either 'PE' or 'P4'.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(2.Multiply every first four characters or our name with every byte of our serial before '-') Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(3.XOR every four byte with every byte of our name.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(4.Convert to positive number if<0.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(5.Convert to number between 10000 and 1000000.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(Forgive me if this code is buggy as I wrote it very quickly in the little spare time I had.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(-----------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(---Copyright by mukesh bhardwaj-------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
( ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
( ///////////*1000+ HACKING TRICKS & TUTORIALS - ebook By Mukesh Bhardwaj Blogger  - Paid Version - only @ ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(TekGyd | itechhacks | Mukeshtricks4u*///////) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
() Tj
ET
endstream
endobj
21 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 20 0 R
>>
endobj
22 0 obj
<<
/Type/Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type/Pages
/Kids[
9 0 R
11 0 R
13 0 R
15 0 R
17 0 R
19 0 R
21 0 R
]
/Count 7
/Resources 3 0 R
>>
endobj
3 0 obj
<<
/ProcSet[/PDF/Text/ImageC]
/Font<<
/F0 7 0 R
>>
>>
endobj
xref
0 23
0000000000 65535 f
0000000009 00000 n
0000035798 00000 n
0000035914 00000 n
0000000168 00000 n
0000000168 00000 n
0000001113 00000 n
0000001256 00000 n
0000001421 00000 n
0000006236 00000 n
0000006330 00000 n
0000011781 00000 n
0000011877 00000 n
0000017076 00000 n
0000017172 00000 n
0000022295 00000 n
0000022391 00000 n
0000027379 00000 n
0000027475 00000 n
0000032265 00000 n
0000032361 00000 n
0000035653 00000 n
0000035749 00000 n
trailer
<<
/Size 23
/Root 22 0 R
/Info 1 0 R
/ID[(424044343ttERDGd)(424044343ttERDGd)]
>>
startxref
35983
%%EOF
