%PDF-1.3
1 0 obj
<<
/CreationDate(D:20160204102524)
/Title()
/Author(PDFZilla)
/Keywords(PDFZilla,Zilla PDF)
/Producer(PDFZilla - Zilla TXT To PDF Converter)
>>
endobj
5 0 obj
[
750 750 278 278 355 556 556 889 667 190 333 333 389 584 278 333 
278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 
584 556 1015 667 667 722 722 667 610 778 722 278 500 667 556 832 
722 778 667 778 722 667 610 722 667 944 667 667 610 278 278 278 
469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 832 
556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 
584 750 556 750 222 556 333 1000 556 556 333 1000 667 333 1000 750 
610 750 750 222 222 333 333 350 556 1000 333 1000 500 333 944 750 
500 667 278 333 556 556 556 556 260 556 333 736 370 556 584 333 
736 552 400 549 333 333 333 576 537 333 333 333 365 556 834 834 
834 610 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 
278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 
667 610 556 556 556 556 556 556 889 500 556 556 556 556 278 278 
278 278 556 556 556 556 556 556 556 549 610 556 556 556 556 500 
556 500 
]
endobj
6 0 obj
<<
/Type/FontDescriptor
/FontName/Arial
/Ascent 905
/Descent -212
/ItalicAngle 0
/CapHeight 905
/Flags 32
/FontBBox[0 0 0 0]
>>
endobj
7 0 obj
<<
/Type/Font
/Subtype/TrueType
/Name/F0
/BaseFont/Arial
/Encoding/WinAnsiEncoding
/FirstChar 30
/LastChar 255
/Widths 5 0 R
/FontDescriptor 6 0 R
>>
endobj
8 0 obj
<<
/Length 6185
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
( ::::TCP\\IP: A Mammoth Description By Ankit Fadia ankit@bol.net.in::::) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
( ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
( ///////////*1000+ HACKING TRICKS & TUTORIALS - ebook By Mukesh Bhardwaj Blogger  - Paid Version - only @ ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(TekGyd | itechhacks | Mukeshtricks4u*///////) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(--------------------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(----------------------------------------------------------------------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(TCP\\IP or Transmission Control Protocol \\ Internet Protocol is a stack or collection of various protocols. A) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(protocol is basically the commands or instructions using which two computers within a local network or the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(Internet can exchange data or information and resources.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(Transmission Control Protocol \\ Internet Protocol  or the TCP\\IP  was developed around the time of the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(ARPAnet. It is also known as the Protocol Suite. It consists of various protocols but as the TCP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(\(Transmission Control Protocol\) and the IP \(Internet Protocol\) are the most, well known of the suite of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(protocols, the entire family or suite is called the TCP\\IP suite.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(The TCP\\ IP Suite is a stacked suite with various layers stacked on each other, each layer looking after one) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(aspect of the data transfer. Data is transferred from one layer to the other. The Entire TCP\\ IP suite can be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(broken down into the below layers-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(Layer Name                                                  Protocol                ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(Link Layer \(Hardware, Ethernet\)                ARP, RARP, PPP, Ether) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(Network Layer\(The Invisible Layer\)           IP, ICMP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(Transport Layer                                           UDP, TCP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(Application Layer\(The Visible Layer\)        The Actual running Applications like-: FTP client, Browser) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(Physical Layer \(Not part of TCP \\IP\)          Physical Data Cables, Telephone wires) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(Data travels from the Link Layer down to the Physical Layer at the source and at the destination it travels) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(from the Physical Layer to the Link Layer. We will later discuss what each layer and each protocol does.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(The TCP\\IP suite not only helps to transfer data but also has to correct various problems that might occur) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(during the data transfer. There are basically two types of most common errors that might occur during the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(process of data transfer. They are-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(Data Corruption -: In this kind of error, the data reaches the destination after getting corrupted.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(Data Loss -: In this kind of error, the entire collection of packets which constitute the data to be ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(transferred) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(does not reach the destination.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(TCP\\IP expects such errors to take place and has certain features which prevent, such error which might) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(occur.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(Checksums-: A checksum is a value \(Normally, a 16 Bit Value\) that is formed by summing up the Binary) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(Data in the used program for a given data block. The program being used is responsible for the calculation) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(of the Checksum value. The data being sent by the program sends this calculated checksum value, along) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(with the data packets to the destination. When the program running at the destination receives the data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(packets, it re-calculates the Checksum value. If the Checksum value calculated by the Destination program) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(matches with the Checksum Value attached to the Data Packets by the Source Program match, then the data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(transfer is said to be valid and error free. Checksum is calculated by adding up all the octets in a datagram.) Tj
ET
endstream
endobj
9 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 8 0 R
>>
endobj
10 0 obj
<<
/Length 6430
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(Packet Sequencing-: All data being transferred on the net is broken down into packets at the source and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(joined together at the destination.  The data is  broken down into packets  in a particular sequence at the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(source.  This means that, for example, the first byte has the first sequence number and the second byte the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(second sequence number  and so on. These packets are free to travel independently on the net, so) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(sometimes, when the data packets reach the destination they arrive, out of sequence, which means that the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(packet which had the first sequence number attached to it does not reach the destination first. Sequencing) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(defines the order in which the hosts receive the data packets or messages. The application or the layer) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(running at the destination automatically builds up the data from the sequence number in each packet.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(The source system breaks the data to be transferred into smaller packets and assigns each packet a unique) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(sequence number. When the destination gets the packets, it's starts rearranging the packets by reading the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(sequence numbers of each packet to make the data received usable.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(For example, say you want to transfer a 18000 octet file.  Not all networks can handle the entire 18000) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(octet packets  at a time. So the huge file is broken down into smaller say 300 octet packets. Each packet has) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(been assigned a unique sequence number. Now when the packets reach the destination the packets are put) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(back together to get the usable data. Now during the transportation process, as the packets can move) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(independently on the net, it is possible that the packet 5 will arrive at the destination before packet 4) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(arrives. In such a situation, the sequence numbers are used by the destination to rearrange the data packets) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(in such a way that even if Data packet 5 arrived earlier, Packet 4 will always precede Packet 5.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(A data can easily be corrupted while it is being transferred from the source to the destination. Now if a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(error control service is running then if it detects data corruption, then it asks the source to re-send the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(packets of data. Thus only non corrupted data reaches the destination. An error control service detects and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(controls the same  two types of errors-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(1.\)  Data Loss) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(2.\) Data Corruption) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(The Checksum values are used to detect if the data has been modified or corrupted during the transfer from) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(source  to destination or any corruption in the communication channel which may have caused data loss.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(Data Corruption is detected by the Checksum Values and by performing Cyclic Redundancy Checks) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(\(CRC 's\). CRC 's too like the Checksums are integer values but require intensely advanced calculation and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(hence are rarely used.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(There is yet another way of detecting data corruption-:  Handshaking.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(This feature ensures demands that both the source and destination must transmit and receive) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(acknowledgement messages, that confirm transfer of uncorrupted data. Such acknowledgement messages) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(are known as ACK messages.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(Let's take an example of a typical scenario of data transfer between two systems.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(Source Sends MSG1 to Destination.  It will not send MSG2 to Destination unless and until it gets the MSG) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(ACK and destination will not send more requests for data or the next request message \(MSG2\) unless it) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(gets the ACK from Source confirming that the MSG1 ACK was received by it. If the source does not get a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(ACK message from the destination, then something which is called a timed-out occurs and the source will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(re send the data to destination.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(So this means that if A sends a data packet to B and B checksums the data packet and finds the data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(corrupted, then it can simply delete for a time out to take place. Once the time out takes place, A will re) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(send the data packet to B. But this kind of system of deleting corrupt data is not used as it is inefficient ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(time consuming.) Tj
ET
endstream
endobj
11 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 10 0 R
>>
endobj
12 0 obj
<<
/Length 6398
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(Instead of deleting the corrupt data and waiting for a time out to take place, the destination \(B\) sends a not) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(acknowledged or NACK message to source\(A\). When A gets the NACK message, instead of waiting for a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(time out to take place, it straightaway resends the data packet.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(An ACK message of 1000 would mean that all data up to 1000 octets has been received till now.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(TCP/ IP is a layered suite of protocols. All layers are equally important and with the absence of even a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(single layer, data transfer would not have been possible. Each TCP/ IP layer contributes to the entire) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(process of data transfer. An excellent example, is when you send an email. For sending mail there is a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(separate protocol, the SMTP protocol which belongs to the Application layer. The SMTP Application) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(protocol like all other application layer protocols assumes  that there is a reliable connection existing) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(between the two computers. For the SMTP application protocol to do what it is designed for, i.e. to send) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(mail, it requires the existence of all other Layers as well. The Physical Layer i.e. cables and wires  is) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(required to transport the data physically. The Transmission Control Protocol or the TCP protocol which) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(belongs to the Transport Layer is needed to keep track of the number of packets sent and for error) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(correction. It is this protocol that makes sure that the data reaches the other end. The TCP protocol is ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(called) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(by the Application Protocol to ensure error free communication between the source and destination. For the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(TCP layer to do its work properly i.e. to ensure that the data packets reach the destination, it requires the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(existence of the Internet Protocol or IP.  The IP protocol contains the Checksum and Source and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(Destination IP address.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(You may wonder why do we need different protocols like TCP and IP and why not bundle them into the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(same Application protocol.? The TCP protocol contains commands or functions which are needed by) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(various application protocols like FTP, SMTP and also HTTP. The TCP protocol also calls on the IP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(protocol, which in turn contains commands or functions which some application protocols require while) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(others don?t. So rather than bundling the entire TCP and IP protocol set into specific application protocols,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(it is better to have different protocols which are called whenever required.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(The Link Layer which is the Hardware or Ethernet layer is also needed for transportation of the data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(packets. The PPP or the Point to Point Protocol belongs to this layer. Before we go on let's get accustomed) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(with certain TCP\\IP terms. Most people get confused between datagrams and packets and think that they) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(are one and the same thing . You see, a datagram is a unit of data which is used by various protocols and a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(packet is a physical object or thing which moves on a physical medium like a wire. There is a remarkable) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(difference between a Packet and a Datagram, but it is beyond the scope of this book. To make things easier) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(I will use only the term datagram \(Actually this is the official term.\)while discussing various protocols.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(Two different main protocols are involved in transporting packets from source to destination.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(1.\) The Transmission Control Protocol or the TCP Protocol) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(2.\) The Internet Protocol or the IP protocol.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(Besides these two main protocols, the Physical Layer and the Ethernet Layer are also indispensable to data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(transfer.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(THE TRANSPORT LAYER) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(The TCP protocol) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(The Transmission Control Protocol is responsible for breaking up the data into smaller datagrams and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(putting the datagrams back to form usable data at the destination. It also resends the lost datagrams to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(destination where the received datagrams are reassembled in the right order. The TCP protocol does the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(bulk of work but without the IP protocol, it cannot transfer data.) Tj
ET
endstream
endobj
13 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 12 0 R
>>
endobj
14 0 obj
<<
/Length 6301
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(Let's take an example to make things more clearer. Let's say your Internet Protocol Address or IP address is) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(xxx.xxx.xxx.xxx or simply x and the destination's IP is yyy.yyy.yyy.yyy or simply y.  Now As soon as the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(three-way connection  is established between x and y, x knows the destination IP address and also the Port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(to which it is connected to. Both x and y are in different networks which can handle different sized packets.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(So in order to send datagrams which are in receivable size, x must know what is the maximum datagram) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(size which y can handle. This too is determined by both x and y during connection time.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(So once x knows the maximum size of the datagram which y can handle, it breaks down the data into) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(smaller chunks or datagrams. Each datagram has it's own TCP header which too is put by TCP.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(A TCP Header contains a lot of information, but the most important of it is the Source and Destination IP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(and Port numbers and yes also the sequence number.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(**************) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(HACKING TRUTH: Learn more about Ports, IP's, Sockets in the Net Tools Manual) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(**************) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(The source which is your computer\(x\) now knows what the IP Addresses and Port Numbers of the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Destination and Source computers are. It now calculates the Checksum value by adding up all the octets of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(the datagram and puts the final checksum value to the TCP Header. The different octets and not the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(datagrams are then numbered. An octet would be a smaller broken down form of the entire data. TCP then) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(puts all this information into the TCP header of each datagram. A TCP Header of a datagram would finally) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(look like -:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(   |          Source Port          |       Destination Port        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(   |                        Sequence Number                        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(   |                    Acknowledgment Number                      |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(   |  Data |           |U|A|P|R|S|F|                               |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(   |       |           |G|K|H|T|N|N|                               |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(   |           Checksum            |         Urgent Pointer        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(   |   The Actual Data form the next 500 octets                    |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(   |                                                               |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(There are certain new fields in the TCP header which you may not know off. Let's see what these new) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(fields signify. The Windows field specifies the octets of new data which is ready to be processed. You see) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(not all computers connected to the Internet run at the same speed and to ensure that a faster system does not) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(send datagrams to a slow system at a rate which is faster than it can handle, we use the Window field. As) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(the computer receives data , the space in the Window field gets decreased indicating that the receiver has) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(received the data. When it reaches zero the sender stops sending further packets. Once the receiver finishes) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(processing the received data, it increases the Window field, which in turn indicates that the receiver has) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(processed the earlier sent data and is ready to receive more chunks of data.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(The Urgent Field tells the remote computer to stop processing the last octet and instead receive the new) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(octet. This is normally not commonly used.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(The TCP protocol is a reliable protocol, which means that we have a guarantee that the data will arrive at) Tj
ET
endstream
endobj
15 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 14 0 R
>>
endobj
16 0 obj
<<
/Length 5796
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(the destination properly and without any errors.  It ensures that the data being received by the receiving end) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(is arranged in the same correct order in which it was sent.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(The TCP Protocol relies on a virtual circuit between the client and the host. The circuit is opened via a 3) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(part process known as the three part handshake. It supports full duplex transportation of data which means) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(that it provides a path for two way data transfer. Hence using the TCP protocol, a computer can send and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(receive datagrams at the same time.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(Some common flags of TCP are-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(RST [RESET]- Resets the connection.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(PSH [PUSH]  - Tells receiver to pass all  queued data  to the application running.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(FIN [FINISH] - Closes connection following the 4 step process.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(SYN Flag      - means that the machine sending this flag wants to establish a three way handshake i.e.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(                        a TCP connection. The receiver of a SYN flag usually responds with an ACK message.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(So now we are in a position to represent a three way TCP Handshake:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(A    <---SYN--->          B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(A     <---SYN/ACK?  B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(A     <---ACK--->         B) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(A sends a SYN flag to B saying  " I want to establish a TCP connection", B responds to the SYN with the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(ACK to the SYN flag. A again responds to the ACK sent by B with another ACK.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(Read RFC 793 for further in depth details about the TCP protocol.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(The User Datagram Protocol or the UDP Protocol) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(The User Data protocol or the UDP is yet another protocol which is a member of the Transport Layer. TCP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(is the standard protocol used by all systems for communications. TCP is used to break down the data to be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(transported into smaller datagrams, before they \(the datagrams\) are sent across a network. Thus we can say) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(that TCP is used where more than a single or multiple datagrams are involved.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(Sometimes, the data to be transported is able to fit into a single datagram. We do not need to break the data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(into smaller datagrams as the size of the data is pretty small. The perfect example of such data is the DNS) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(system. To send out the query for a particular domain name, a single datagram is more than enough. Also) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(the IP that is returned by the Domain Name  Server does not require more than one datagram for) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(transportation. So in such cases instead of making use of the complex TCP protocol, applications fall back) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(to the UDP protocol.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(The UDP protocol works almost the way TCP works. But the only differences being that TCP breaks the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(data to be transferred into smaller chunks, does sequencing by inserting  a sequence number in the header) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(and no error control. Thus we can conclude by saying that the UDP protocol is an unreliable protocol with) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(no way to confirm that the data has reached the destination.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(The UDP protocol does insert a USP header to the single datagram it is transporting. The UDP header) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(contains the Source and Destination IP Addresses and Port Numbers and also the Checksum value. The) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(UDP header is comparatively smaller than the TCP Header.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(It is used by those applications where small chunks of data are involved. It offers services to the User's) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(Network Applications like NFS\(Network File Sharing\) and SNMP.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(Read RFC 768 for further in depth details about the UDP protocol.) Tj
ET
endstream
endobj
17 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 16 0 R
>>
endobj
18 0 obj
<<
/Length 5937
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(THE NETWORK LAYER) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(The IP Protocol) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(Both the TCP and the UDP protocols, after inserting the headers to the datagram\(s\) given to them pass) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(them to the Internet Protocol or the IP Protocol.  The main job of the IP protocol is to find a way of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(transporting the datagrams to the destination receiver. It does not do any kind of error checking.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(The IP protocol too adds it's own IP Header to each datagram. The IP header contains the source and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(destination IP addresses, the protocol number and yet another checksum. The IP header of a particular) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(datagram looks like-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(   |Version|  IHL  |Type of Service|          Total Length         |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(   |         Identification        |Flags|      Fragment Offset    |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(   |  Time to Live |    Protocol   |         Header Checksum       |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(   |                       Source Address                          |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(   |                    Destination Address                        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(   |  TCP header info followed by the actual data being transferred|) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(   |                                                               |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(The Source and destination IP addresses and needed so that?well it is obvious isn't it? The Protocol) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(number is added so that the IP protocol knows to which Transport Protocol the datagram has to be passed.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(You see various Transport Protocols are used like for example TCP or UDP. So this protocol number is) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(inserted to tell IP the protocol to which the datagram has to be passed.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(It too inserts it's own Checksum value which is different from the Checksum Value inserted by the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(Transport Protocols. This Checksum has to be inserted as without it the Internet Protocol will not be able to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(verify if the Header has been damaged in the transfer process and hence the datagram might reach a wrong) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(destination. The Time to Live field specifies a value which is decreased each time the datagram passes) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(through a network. Remember Tracert?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(The Internet Protocol Header contains other fields as well, but they are quite advanced and cannot be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(included in a manual which gives an introduction to the TCP\\IP protocol. To learn more about the IP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(protocol read RFC 791.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(The Internet Control Message Protocol or the ICMP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(The ICMP protocol allows hosts to transfer information on errors that might have occurred during the data) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(transfer between two hosts.  It is basically used to display error messages about errors that might occur) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(during the data transfer. The ICMP is a very simple protocol without any headers. It is most commonly) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(used to diagnose Network Problems. The famous utility PING is a part of the ICMP protocol. ICMP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(requests do not require the user or application to mention any port number as all ICMP requests are) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(answered by the Network Software itself. The ICMP protocol too handles only a single datagram. That's) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(why we say in PING only a single datagram is sent to the remote computer. This protocol can remote many) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(network problems like Host Down, Congested Network etc) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
() Tj
ET
endstream
endobj
19 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 18 0 R
>>
endobj
20 0 obj
<<
/Length 6258
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(Read RFC 792 for further in depth details about the ICMP protocol.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(The Link Layer) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(Almost all networks use Ethernet. Each machine in a network has it's own IP address and it's Ether) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(Address. The Ether Address of a computer is different than it's IP address. An Ether Address is a 42 bit) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(address while the IP address is only a 32 bit address. A Network must know which computer to deliver the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(datagram to. Right? For this the Ether Header is used.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(The Ether Header is a 14 octet header that contains the Source and Destination Ethernet address, and a type) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(code. Ether too calculates it's own Checksum value. The Type code relates to the protocol families to be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(used within the Network. The Ether Layer passes the datagram to the protocol specified by this field after) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(inserting the Ether Header. There is simply no connection between the Ethernet Address and the IP address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(of a machine. Each machine needs to have a Ethernet to IP address translation table on its hard disk.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(   |       Ethernet destination address \(first 32 bits\)                                         |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(   | Ethernet dest \(last 16 bits\)          |Ethernet source \(first 16 bits\)              |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(   |       Ethernet source address \(last 32 bits\)                                                 |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(   |        Type code                                                                                         ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(|) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(   |  IP header, then TCP header, then your data                                            |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(   |                                                                                                          ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(   |                                                                                                          ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(   |                           |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(   |                       Ethernet Checksum                                                             |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(Address Resolution Protocol or ARP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(Data before being transmitted across the Internet or across a local network is broken down into smaller) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(Packets which are suitable for transfer over the net. These packets have the Source and Destination IP's but) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(for the transfer to take place the suitable Hardware Addresses or the MAC addresses must also be known.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(That is where ARP comes in.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(To get the Hardware MAC addresses, ARP or Address Resolution Protocol sends a request message. The) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(Router replies with the Hardware Address. It is similar to the DNS and it too has a cache. This cache can be) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(a bit vulnerable as a Hacker could forge a connection from a remote machine claiming to be one of the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(cached locations. So we can conclude that ARP translates IP's into Ethernet Addresses. One thing to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(remember about ARP is that it only translates outgoing packets.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(There is also something called the RARP which is an abbreviation for Reverse Address Resolution  ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(Protocol, which like the name says does exactly reverse of what ARP does.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(There is simply no algorithm to get the Ethernet Address from the IP Address. To carry out such) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(translations, each computer has a file which has a table with rows for each computer and two columns for) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(their corresponding IP address and Ethernet Address. The File is somewhat like the following-:) Tj
ET
endstream
endobj
21 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 20 0 R
>>
endobj
22 0 obj
<<
/Length 6595
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(                                     Internet Protocol Address                         Ethernet Address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(Computer Name              xxx.xy.yy.yx                                           08-00-39-00-2F-C3) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(Say there are a system in a Network \(A\) and an unidentified system \(B\) contacts it. Now A only knows the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(IP address of B. Now A will first try to identify whether B is the same network so that it can directly) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(communicate via Ethernet. So it will first check the IP to MAC address translation table which it has. If it) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(finds the IP in the table then well and good and A will establish a connection with B via Ethernet.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(On the Other hand if A does not find any match for the specific IP, it will send out a request in the form of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(a 'Broadcast'. All computers within the Network will receive this broadcast and will search their own IP to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(MAC translation table and will reply with the necessary MAC address. A basic difference between an Ip) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(address and MAC address is that an IP is the form xxx.xxx.xxx.xxx and a MAC address is in the form) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(xx:xx:xx:xx:xx:xx and one is 32 bit while the other is 40 bit.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(Read RFC 826 for further in depth details about the ARP protocol.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Application Layer) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(Till now  you  have learnt  how data is broken down into smaller chunks, and transferred to the destination,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(where the chunks are rearranged. But there is yet another aspect to a successful data transfer process, which) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(we have not discussed yet: The Application Protocols and the Application Layer itself. A host which) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(receives datagrams has many applications or services \(daemons\) running which are ready to establish a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(TCP connection and accept a message. Datagrams travelling on the Internet must know which application) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(they have to establish connection with, which application they have to send the message to. A typical web) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(server will have the FTP daemon, the HTTP daemon, the POP daemon, and the SMTP daemon running.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(Wouldn't the datagrams get confused as to which daemon to send the message to.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(For the datagrams to know which computer to send the message to, we have IP addresses. The datagram) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(knows what daemon or application to send the message to by the Port Number attached to the IP address of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(the Destination. A TCP address is actually fully described by 4 numbers; The IP address of the Source and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(Destination and the TCP Port Numbers of each end to which data is to be sent. These numbers are found in) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(the TCP Header.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(To make it simpler to understand I have included an excerpt from the Net Tools Chapter:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(What is all the hype about socket programming? What exactly are sockets?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(TCP\\IP or Transmission Control Protocol\\ Internet Protocol is the language or the protocol used by) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(computers to communicate with each other over the Internet. Say a computer whose IP address is) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(99.99.99.99 wants to communicate with another machine whose IP address is 98.98.98.98 then would will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(happen?) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(The machine whose IP is 99.99.99.99 sends a packet addressed to another machine whose IP is) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(98.98.98.98. When 98.98.98.98 receives the packet then it verifies that it got the message by sending a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(signal back to 99.99.99.99.But say the person who is using 99.99.99.99 wants to have simultaneously  more) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(than one connections to 98.98.98.98.....then what will happen? Say 99.99.99.99 wants to connect to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(the FTP daemon and download a file by FTP and at the same time it wants to connect to 98.98.98.98's) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(website i.e. The HTTP daemon. Then 98.98.98.98. will have 2 connects with 99.99.99.99 simultaneously.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(Now how can 98.98.98.98.distinguish between the two connections...how does 98.98.98.98. know which) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(is for the FTP daemon and which for the HTTP daemon? If there was no way to distinguish between the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(two connections then they would both get mixed up and there would be a lot of chaos with the message) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(meant for the HTTP daemon going to the FTP daemon. To avoid such confusion we have ports. At each) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(port a particular service or daemon is running by default. So now that the 99.99.99.99 computers knows) Tj
ET
endstream
endobj
23 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 22 0 R
>>
endobj
24 0 obj
<<
/Length 6260
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(which port to connect to, to download a FTP file and which port to connect to, to download the web page,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(it will communicate with the 98.98.98.98 machine using what is known as the socket pair which is a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(combination of an IP address and a Port. So in the above case the message which is meant for the FTP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(daemon  will be addressed to 98.98.98.98 : 21 \(Notice the colon and the default FTP port suceeding it.\).) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(So that the receiving machine i.e. 98.98.98.98 will know for which service this message is meant for and to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(which port it should be directed to.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(In TCP\\IP or over the Internet all communication is done using the Socket pair i.e. the combination of the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(IP address and the port.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(*****************) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(HACKING TRUTH: Learn More about Ports, IP addresses and Sockets by reading the Net Tools Chapter.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(*****************) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(The Application Layers basically consists of the Applications running on your computer and the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(Applications running on the host to which you are connected. Say you are viewing the Hotmail Site, then) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(the application layer comprises of the Web Browser running on your computer and the HTTP daemon) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(running at Hotmail's server and the Application Protocol being used to communicate is HyperText Transfer) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(Protocol.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(As soon as a TCP connection is established the Applications running on Each end decide the language or) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(protocol to be used to communicate and send datagrams.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(IP Spoofing Torn Apart) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(IP spoofing is the most exciting topic you will hear wannabe hackers talking about. It is also a subject) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(about which no one knows much. Before we continue I would like to tell you that IP Spoofing is quite) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(difficult to understand and a lot of people have trouble understanding how it is done. The other downside it) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(has is the fact that it can almost not be done using a Windows system and a system administrator can easily) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(protect his system from IP spoofing) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(So what is IP Spoofing? IP Spoofing is a trick played on servers to fool the target computer into thinking) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(that it is receiving data from a source other than you. This in turn basically means to send data to a remote) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(host so that it believes that the data is coming from a computer whose IP address is something other than) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(yours. Let's take an example to make it clear:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(Your IP is : 203.45.98.01 \(REAL\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(IP of Victim computer is: 202.14.12.1 \(VICTIM\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(IP you want data to be sent from: 173.23.45.89 \(FAKE\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(Normally sitting on the computer whose IP is REAL, the datagrams you send to VICTIM will appear to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(have come from REAL. Now consider a situation in which you want to send a datagram to VICTIM and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(make him believe that it came from a computer whose IP is FAKE. This is when you perform IP Spoofing.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(The Main problem with IP Spoofing is that even if you are able to send a spoofed datagram to the remote) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(host, the remote host will reply not to your real IP but to the Fake IP you made your datagram seem to have) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(come from. Getting confused? Read the following example to clear up your mind.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(Taking the same IP's as in the last example, consider the following scenario. Now, if REAL connects to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(VICTIM, after the standard three way handshake has taken place, and VICTIM sends an ACK message to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(REAL. Now if you spoof you IP, to say FAKE, then VICTIM will try to establish a TCP connection and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(will send an ACK message to FAKE. Now lets assume that FAKE is alive, then as it had not requested the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(ACK message \(sent by VICTIM to FAKE\) it will reply with a NACK message which would basically end) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(the connection and no further communication between FAKE and VICTIM would take place. Now if) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(FAKE doesn't exist then the ACK message sent by VICTIM will not get any reply and in the end the) Tj
ET
endstream
endobj
25 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 24 0 R
>>
endobj
26 0 obj
<<
/Length 6308
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(connection times out.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(Due to this FAKE and REAL IP reasons, when a person is trying to perform an IP Spoof, he does not get) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(any response from the remote host and has no clue whether he has been successful or not. If he has made) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(any progress or not. You are as good as blind, with no medium through which you could get feedback.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(IP Spoofing can be successful only if the computer with the FAKE IP does not reply to the victim and not) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(interrupt the spoofed connection.  Take the example of a telephone conversation, you can call up a person) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(' x ' and pretend to be ' y ' as long as ' y ' does not interrupt the conversation and give the game away.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(So why would you need to perform IP Spoofing-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(1.\) To Pretend that you are some other computer whose IP address is amongst the trusted list of computers) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(on the victim's disk. This way you are exploit the 'r' services and gain access to the network as you are) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(then believed to be from a trusted source.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(2.\) To Disguise or Mask your IP address so that the victim does not know who you really are and where) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(the data is coming from.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(If you ever read the alt.2600 or the alt.hacking newsgroup, you would probably find many postings like "I) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(have Win98, how do I Spoof my IP" or even " I do not know TCP/IP. tell me how to perform IP spoofing".) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(You see the very fact that they are posting such questions and expect to learn how to spoof their IP without) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(even knowing a bit about TCP\\IP, confirms the fact that they would not be able to perform IP Spoofing. No) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(I am not saying that asking questions is bad, but you see not knowing something is not so bad, but not) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(knowing something and showing ignorance towards learning it is really, really bad.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(You see IP spoofing is a very complex and difficult to perform subject. You need to hog entire TCP/IP and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(Networking Protocols manuals and need to be able to write C programs which will help you in the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(Spoofing process. It is amazing how people even think that they can spoof their IP without even knowing) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(what TCP/IP stands for.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(You see all packets travelling across the Internet have headers which contain the source and destination IP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(addresses and port numbers, so that the packet knows where to go and the destination knows where the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(packet has come from and where to respond. Now the process of Spoofing means to change the source IP) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(address contains by the Header of the packet, in turn fooling the receiver of the Packets into believing that) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(the packet came from somewhere else, which is a fake IP. Now let's again look at the IP Header of a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(datagram.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(   |Version|  IHL  |Type of Service|          Total Length         |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(   |         Identification        |Flags|      Fragment Offset    |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(   |  Time to Live |    Protocol   |         Header Checksum       |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(   |                       Source Address                          |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(   |                    Destination Address                        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(   |  TCP header info followed by the actual data being transferred             |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(   |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(Now basically to perform IP spoofing we need to be able to change the value of the field, Source Address.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(Now to this you need to be able to guess sequence numbers which is quite a sophisticated process and I will) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(try to explain it as clearly as possible. Before we go on, you need to understand the fact the IP spoofing is) Tj
ET
endstream
endobj
27 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 26 0 R
>>
endobj
28 0 obj
<<
/Length 6178
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(not the entire process, it is just a stepping stop in the entire process of fooling the remote host and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(establishing a trust relationship with the remote host.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(So how do these trust relationships take place? Well all of you are encountered with some form of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(authentication process or the other. Now the Username-Password pair is the most commonly used form of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(authentication, with which we are very much familiar. Now what happens in the Username-Password form) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(of authentication is that the remote host to which the client is connected to challenges the client by asking) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(the User to type in the Username and Password. So in this form of authentication, the User needs to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(intervened and the remote host challenges the user to enter the Username and Password which act as a from) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(of authentication.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(Now other than the Password-Username form of authentication there is yet another form of authentication) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(most users do not know of. This is the Client IP. In this form of authentication, what happens is that the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(remote host gets or find out the IP address of the client and compares it with a predefined list of IP's. If ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(IP of the client who is trying to establish a connection with the remote host is found in the list of IP's) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(maintained by the host, then it allows the client access to the shell  'without a password'  as the identity ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(the client has already been authenticated.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(Such kind of rust relationships are common in Unix Systems which have certain 'R services' like rsh ,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(rlogin , rcp   which have certain security problems and should be avoided. Despite the threat involved most) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(ISP's in India still keep the ports of the R services open to be exploited by Hackers. You normally establish) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(a  Rlogin  trust relationship by using the Unix command,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
($>rlogin IP address) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(**************) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(HACKING TRUTH: Well there is definitely a cooler way of establishing a trust relationship with a remote) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(host, using Telnet. The default port numbers at which the R services run are 512, 513,514) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(**************) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(So how do I spoof my IP? Well in short, to spoof your IP, you need to be able to predict sequence numbers,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(this will clearer after reading then next few paragraphs.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(To understand Sequence Numbers you need to go back to, how the TCP protocol works.  You already) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(know that TCP is a reliable protocol and has certain in-built features which have the ability to rearrange, ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(re-) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(send lost, duplicated  or out of sequence data. To make sure that the destination is able to rearrange the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(datagrams in the correct order, TCP inserts two sequence numbers into each TCP datagram. One Sequence) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(number tells the receiving computer where a particular datagram belongs while the second sequence) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(number says how much data has been received by the sender. Anyway, let's move on, TCP also relies on) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(ACK and NACK messages to ensure that all datagrams have reached the destination error free.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(Now we need to reanalyze the TCP Header to understand certain other aspects of sequence numbers and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(the ACK Number.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(   |          Source Port          |       Destination Port        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(   |                        Sequence Number                        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(   |                    Acknowledgment Number                      |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(   |  Data |           |U|A|P|R|S|F|                                                                       |) Tj
ET
endstream
endobj
29 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 28 0 R
>>
endobj
30 0 obj
<<
/Length 6724
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(   | Offset| Reserved  |R|C|S|S|Y|I|            Window                                       |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(   |           |           |G|K|H|T|N|N|                                                                     |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(   |           Checksum            |         Urgent Pointer        |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(   |   The Actual Data form the next 500 octets                    |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(   |                                                               |) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(You see the TCP Header contains a Sequence Number which actually represents the sequence number of) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(the first byte of that particular TCP segment. A sequence number is a 32 Bit number which is attached  to) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(all bytes \(data\) being exchanged across a Network. The ACK Number Field in the TCP header, actually) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(contains the  value of the sequence number which it expects to be the next. Not only that, it also does what) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(it was meant to do, acknowledge  data received. Confused? Read it again till you get the hang of it.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(When  a connection is established, the initial sequence number or ISN is initialized to 1. This ISN number) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(is then incremented by 128,000 every second. There is a certain patter according to which the sequence) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(numbers increment or change which makes then easy to predict.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(To successfully perform IP spoofing or in order to predict Sequence Numbers, you need to be running a) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(form of UNIX, as Windows does not provide the users with access to really advanced system stuff.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(Without a form of Unix IP Spoofing is almost impossible to do.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(This text is not the ultimate guide to IP Spoofing and was aimed at only giving you a general outline of the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(whole process. Sequence number Prediction is really, really sophisticated and difficult to understand, but) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(not impossible to do. However a system administrator can easily save his systems from IP spoofing and this) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(actually makes it quite useless, nonetheless truly exciting. If You really want to learn IP Spoofing I suggest) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(you read IP Spoofing Demystified by daemon9/route/infinity which was a part of Issue 48 of PHRACK) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(magazine, File 14 of 18. Go to the Archive Section of their site, http://www.phrack.com and click on Issue) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(48.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(This brings me to the other purpose people use IP Spoofing, IP Masking. Now to something as simple as) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(mask or hide your IP you do not need to go through the complex procedure of guessing sequence numbers) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(and performing IP Spoofing. There are  proxy servers to do that for you. Read the Net Tools chapter for) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(further details.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(Port Scanning in Networking Terms) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(Earlier we learnt what a Port scan is why it is considered to be such a important tool of getting information) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(about the remote host, which in turn can be used to exploit any vulnerabilities and break into the system.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(We all know how a manual Port Scan works. You launch Telnet and manually Telnet to each Port jotting) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(down information that you think is important.  In a manual Port Scan, when you telnet to a port of a remote) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(host, a full three way handshake takes place, which means that  a complete TCP connection opens.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(The earliest and the oldest version of Port Scanners used the same technique. They connected to each port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(and established a full three way handshake for a complete TCP connection. The downside of such port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(scanners was the fact that as a full TCP connection was being established, the system administrator could) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(easily detect that someone is trying to port scan his systems to find a vulnerability. However such port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(scanning methods also had a bright side, as an actual TCP connection was being established, the port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(scanning software did not have to build a Fake Internet Protocol Packet. \(This IP Packet is used to scan the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(remote systems.\) Such TCP scanners too relied on the three-way TCP handshake to detect if a port is open) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(or not. The Basic process of detecting whether a port is open or not has been described below:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(1.\) You send a TCP Packet containing the SYN flag to remote host.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(2.\) Now the remote host checks whether the port is open or not. If the port is open then it replies with a) Tj
ET
endstream
endobj
31 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 30 0 R
>>
endobj
32 0 obj
<<
/Length 5392
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(TCP packet containing both an ACK message confirming that the port is open and a SYN flag. On the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(other hand if the port is closed then the remote host sends the RST flag which resets the connection, in) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(short closes the connection.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(3.\) This third phase is optional and involves the sending of an ACK message by the client.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(As TCP Scanners were detectable, programmers around the world developed a new kind of port scanner,) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(the SYN Scanner, which did not establish a complete TCP connection. These kinds of port scanners remain) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(undetectable by only sending the first single TCP Packet containing the  SYN flag and establishing a half) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(TCP Connection. T understand the working of a SYN or Half SYN Port Scanner simply read its 4 step) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(working-:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(1. SYN Port Scanner sends the first TCP packet containing  the SYN flag to the remote host.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(2. The remote system replies with, either a SYN plus ACK or a RST.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(3. When the SYN Port scanner receives one of the above responses, it knows whether the respective port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(is open or not and whether a daemon is ready listening for connections.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(The SYN Port Scanners were undetectable by most normal system port scan detectors, however newer post) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(scan detectors like netstat and also some firewalls can filter out such scans. Another downside to such) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(scanning is that the method in which the scanner makes the IP packet varies from system to system.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(UDP Scanning) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(It is yet another port scanning technique which can be used to scan a UDP port to see if it is listening. To) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(detect an open UDP port, simply send a single UDP Packet to the port. If it is listening, you will get the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(response, if it is not, then ICMP takes over and displays the error message, " Destination Port) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(Unreachable".) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(FIN Port Scanners) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(FIN Port Scanners are my favorite type of port scanners. They send a single packet containg the FIN flag. If) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(the remote host returns a RST flag then the port is closed, if no RST flag is returned, then it is open and) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(listening.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(Some port scanners also use the technique of sending a ACK packet and if the Time To Live or ttl of the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(returning packets is lower than the RST packets received \(earlier\), or if the windows size is greater than) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(zero, then the port is probably open and listening.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(The Following is the code of a supposedly Stealth Port Scanner which appeared in the Phrack Magazine.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(/*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(* scantcp.c) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(* version 1.32) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(*  ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(* Scans for listening TCP ports by sending packets to them and waiting for) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(* replies. Relys upon the TCP specs and some TCP implementation bugs found) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(* when viewing tcpdump logs.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(* As always, portions recycled \(eventually, with some stops\) from n00k.c) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(* \(Wow, that little piece of code I wrote long ago still serves as the base) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(*  interface for newer tools\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(* Technique:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(* 1. Active scanning: not supported - why bother.) Tj
ET
endstream
endobj
33 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 32 0 R
>>
endobj
34 0 obj
<<
/Length 4420
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(* 2. Half-open scanning:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(*      a. send SYN) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(*      b. if reply is SYN|ACK send RST, port is listening) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(*      c. if reply is RST, port is not listening) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(* 3. Stealth scanning: \(works on nearly all systems tested\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(*      a. sends FIN) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(*      b. if RST is returned, not listening.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(*      c. otherwise, port is probably listening.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(* \(This bug in many TCP implementations is not limited to FIN only; in fact) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(*  many other flag combinations will have similar effects. FIN alone was) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(*  selected because always returns a plain RST when not listening, and the) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(*  code here was fit to handle RSTs already so it took me like 2 minutes) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(*  to add this scanning method\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(* 4. Stealth scanning: \(may not work on all systems\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(*      a. sends ACK) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(*      b. waits for RST) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(*      c. if TTL is low or window is not 0, port is probably listening.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(* \(stealth scanning was created after I watched some tcpdump logs with) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(*  these symptoms. The low-TTL implementation bug is currently believed) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(*  to appear on Linux only, the non-zero window on ACK seems to exists on) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(*  all BSDs.\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(* CHANGES:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(* --------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(* 0. \(v1.0\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(*    - First code, worked but was put aside since I didn't have time nor) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(*      need to continue developing it.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(* 1. \(v1.1\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(*    - BASE CODE MOSTLY REWRITTEN \(the old code wasn't that maintainable\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(*    - Added code to actually enforce the usecond-delay without usleep\(\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(*      \(replies might be lost if usleep\(\)ing\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(* 2. \(v1.2\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(*    - Added another stealth scanning method \(FIN\).) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(*      Tested and passed on:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(*      AIX 3) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(*      AIX 4) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(*      IRIX 5.3) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(*      SunOS 4.1.3  ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(*      System V 4.0) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(*      Linux) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(*      FreeBSD  ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(*      Solaris) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(*    ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(*      Tested and failed on:) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(*      Cisco router with services on \( IOS 11.0\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(* 3. \(v1.21\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(*    - Code commented since I intend on abandoning this for a while.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(*) Tj
ET
endstream
endobj
35 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 34 0 R
>>
endobj
36 0 obj
<<
/Length 4102
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(* 4. \(v1.3\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(*    - Resending for ports that weren't replied for.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(*      \(took some modifications in the internal structures. this also) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(*  makes it possible to use non-linear port ranges) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(*  \(say 1-1024 and 6000\)\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(* 5. \(v1.31\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(*    - Flood detection - will slow up the sending rate if not replies are) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(* recieved for STCP_THRESHOLD consecutive sends. Saves alot of resends) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(* on easily-flooded networks.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(* 6. \(v1.32\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(*      - Multiple port ranges support.) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(*        The format is: <start-end>|<num>[,<start-end>|<num>,...]) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(*) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(*        Examples: 20-26,113) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(*                  20-100,113-150,6000,6660-6669) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(*    ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(* PLANNED: \(when I have time for this\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(* ------------------------------------) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(* \(v2.x\) - Multiple flag combination selections, smart algorithm to point) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(*          out uncommon replies and cross-check them with another flag) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(*        ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
(*/) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
(#define RESOLVE_QUIET) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
(#include <stdio.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(#include <netinet/in.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(#include <netinet/ip.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(#include <netinet/ip_tcp.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(#include <sys/time.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(#include <sys/types.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(#include <sys/socket.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
(#include <unistd.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(#include <stdlib.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
(#include <string.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(#include <signal.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
(#include <errno.h>) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(#include "resolve.c") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
(#include "tcppkt03.c") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
(#define STCP_VERSION "1.32") Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(#define STCP_PORT  1234         /* Our local port. */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(#define STCP_SENDS 3            ) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
(#define STCP_THRESHOLD 8) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(#define STCP_SLOWFACTOR 10) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
(/* GENERAL ROUTINES ------------------------------------------- */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(void banner\(void\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 81.656 Td
(    {) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 67.483 Td
(printf\("\\nscantcp\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 53.31 Td
(printf\("version %s\\n",STCP_VERSION\);) Tj
ET
endstream
endobj
37 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 36 0 R
>>
endobj
38 0 obj
<<
/Length 4043
>>
stream
BT
/F0 10 Tf
0 0 0 rg
28.346 804.491 Td
(    }) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 790.318 Td
(void usage\(const char *progname\)) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 776.144 Td
(    {) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 761.971 Td
(printf\("\\nusage: \\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 747.798 Td
(printf\("%s <method> <source> <dest> <ports> <udelay> <delay> [sf]\\n\\n",progname\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 733.625 Td
(       printf\("\\t<method> : 0: half-open scanning \(type 0, SYN\)\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 719.451 Td
(printf\("\\t           1: stealth scanning \(type 1, FIN\)\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 705.278 Td
(printf\("\\t           2: stealth scanning \(type 2, ACK\)\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 691.105 Td
(printf\("\\t<source> : source address \(this host\)\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 676.932 Td
(printf\("\\t<dest>   : target to scan\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 662.759 Td
(printf\("\\t<ports>  : ports/and or ranges to scan - eg: 21-30,113,6000\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 648.585 Td
(printf\("\\t<udelay> : microseconds to wait between TCP sends\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 634.412 Td
(printf\("\\t<delay>  : seconds to wait for TCP replies\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 620.239 Td
(printf\("\\t[sf]     : slow-factor in case sends are dectected to be too fast\\n\\n"\);) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 606.066 Td
(    }) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 591.892 Td
(/* OPTION PARSING etc ---------------------------------------- */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 577.719 Td
(unsigned char *dest_name;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 563.546 Td
(unsigned char *spoof_name;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 549.373 Td
(struct sockaddr_in destaddr;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 535.199 Td
(unsigned long dest_addr;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 521.026 Td
(unsigned long spoof_addr;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 506.853 Td
(unsigned long usecdelay;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 492.68 Td
(unsigned      waitdelay;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 478.507 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 464.333 Td
(int slowfactor = STCP_SLOWFACTOR;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 450.16 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 435.987 Td
(struct portrec           /* the port-data structure */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 421.814 Td
({) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 407.64 Td
(  unsigned           n;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 393.467 Td
(  int                state;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 379.294 Td
(  unsigned char      ttl;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 365.121 Td
(  unsigned short int window;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 350.948 Td
(  unsigned long int  seq;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 336.774 Td
(  char               sends;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 322.601 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 308.428 Td
(} *ports;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 294.255 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 280.081 Td
(char *portstr;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 265.908 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 251.735 Td
(unsigned char scanflags;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 237.562 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 223.388 Td
(int done;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 209.215 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 195.042 Td
(int rawsock;          /* socket descriptors */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 180.869 Td
(int tcpsock;) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 166.696 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 152.522 Td
(int lastidx = 0;         /* last sent index */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 138.349 Td
(int maxports;                          /* total number of ports */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 124.176 Td
() Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 110.003 Td
(void timeout\(int signum\)        /* timeout handler           */) Tj
ET
BT
/F0 10 Tf
0 0 0 rg
28.346 95.829 Td
(    {       &) Tj
ET
endstream
endobj
39 0 obj
<<
/Type/Page
/Parent 2 0 R
/MediaBox[ 0 0 595.276 841.89 ]
/Contents 38 0 R
>>
endobj
40 0 obj
<<
/Type/Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type/Pages
/Kids[
9 0 R
11 0 R
13 0 R
15 0 R
17 0 R
19 0 R
21 0 R
23 0 R
25 0 R
27 0 R
29 0 R
31 0 R
33 0 R
35 0 R
37 0 R
39 0 R
]
/Count 16
/Resources 3 0 R
>>
endobj
3 0 obj
<<
/ProcSet[/PDF/Text/ImageC]
/Font<<
/F0 7 0 R
>>
>>
endobj
xref
0 41
0000000000 65535 f
0000000009 00000 n
0000097162 00000 n
0000097342 00000 n
0000000168 00000 n
0000000168 00000 n
0000001113 00000 n
0000001256 00000 n
0000001421 00000 n
0000007657 00000 n
0000007751 00000 n
0000014233 00000 n
0000014329 00000 n
0000020779 00000 n
0000020875 00000 n
0000027228 00000 n
0000027324 00000 n
0000033172 00000 n
0000033268 00000 n
0000039257 00000 n
0000039353 00000 n
0000045663 00000 n
0000045759 00000 n
0000052406 00000 n
0000052502 00000 n
0000058814 00000 n
0000058910 00000 n
0000065270 00000 n
0000065366 00000 n
0000071596 00000 n
0000071692 00000 n
0000078468 00000 n
0000078564 00000 n
0000084008 00000 n
0000084104 00000 n
0000088576 00000 n
0000088672 00000 n
0000092826 00000 n
0000092922 00000 n
0000097017 00000 n
0000097113 00000 n
trailer
<<
/Size 41
/Root 40 0 R
/Info 1 0 R
/ID[(424044343ttcpmtDcpoodaetnUaop)(424044343ttcpmtDcpoodaetnUaop)]
>>
startxref
97411
%%EOF
